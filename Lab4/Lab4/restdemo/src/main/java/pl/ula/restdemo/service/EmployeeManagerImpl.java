package pl.ula.restdemo.service;

import org.springframework.stereotype.Component;

import pl.ula.restdemo.domain.Employee;

import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by tp on 24.04.17.
 */
@Component
public class EmployeeManagerImpl implements  EmployeeManager {

    private Connection connection;

    private PreparedStatement addEmployeeStmt;
    private PreparedStatement getAllEmployeesStmt;

    private PreparedStatement deleteEmployeeStmt;

    private PreparedStatement getEmployeeStmt;

    private PreparedStatement updateEmployeeStmt;

	private PreparedStatement deleteAllEmployeesStmt;

    public EmployeeManagerImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public EmployeeManagerImpl() throws SQLException {
      //  this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
    	this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb"); 
    	if (!isDatabaseReady()) {
            createTables();
        }
        this.setConnection(this.connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement()
                .executeUpdate("CREATE TABLE " + "Employee(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                        + "name varchar(20) NOT NULL, " + "yob integer)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Employee".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int addEmployee(Employee employee) {
        int count = 0;
        try {
            addEmployeeStmt.setString(1, employee.getName());
            addEmployeeStmt.setInt(2, employee.getYob());
            count = addEmployeeStmt.executeUpdate();
            ResultSet generatedKeys = addEmployeeStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                employee.setId(generatedKeys.getLong(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<Employee> getAllEmployees() {
        List<Employee> employees = new LinkedList<>();
        try {
            ResultSet rs = getAllEmployeesStmt.executeQuery();

            while (rs.next()) {
                Employee p = new Employee();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setYob(rs.getInt("yob"));
                employees.add(p);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return employees;
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addEmployeeStmt = connection.prepareStatement(
            "INSERT INTO Employee (name, yob) VALUES (?, ?)",
                Statement.RETURN_GENERATED_KEYS);
        deleteEmployeeStmt = connection.prepareStatement("DELETE FROM Employee where id = ?");
        deleteAllEmployeesStmt = connection.prepareStatement("DELETE FROM Employee");
        getAllEmployeesStmt = connection.prepareStatement("SELECT id, name, yob FROM Employee ORDER BY id");
        getEmployeeStmt = connection.prepareStatement("SELECT id, name, yob FROM Employee WHERE id = ?");
        updateEmployeeStmt = connection.prepareStatement("UPDATE Employee SET name=?,yob=? WHERE id = ?");
    }

    @Override
    public int deleteEmployee(Employee employee) {
        try {
            deleteEmployeeStmt.setLong(1, employee.getId());
            return deleteEmployeeStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public int updateEmployee(Employee employee) throws SQLException {
        int count = 0;
        try {
            updateEmployeeStmt.setString(1, employee.getName());
            updateEmployeeStmt.setInt(2, employee.getYob());
            updateEmployeeStmt.setLong(3, employee.getId());
            count = updateEmployeeStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("Employee not found for update");
        return count;
    }

    @Override
    public Employee getEmployee(long id) throws SQLException {
        try {
            getEmployeeStmt.setLong(1, id);
            ResultSet rs = getEmployeeStmt.executeQuery();

            if (rs.next()) {
                Employee p = new Employee();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setYob(rs.getInt("yob"));
                return p;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Employee with id " + id + " does not exist");
    }

    @Override
    public String introduceSelf() {
        return null;
    }

    @Override
    public int deleteAll() {
        try {
            return deleteAllEmployeesStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }
}
